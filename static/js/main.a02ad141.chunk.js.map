{"version":3,"sources":["page/About.tsx","page/Home.tsx","App.tsx","serviceWorker.js","index.js"],"names":["scene","camera","renderer","cube","defaultStyle","textDecoration","color","fontSize","backgroundColor","Home","className","to","exact","style","About","useEffect","THREE","window","innerWidth","innerHeight","setSize","document","getElementById","appendChild","domElement","geometry","material","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","App","basename","location","pathname","path","component","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAGIA,EAAYC,EAAaC,EAAeC,E,uDCAtCC,EAAe,CACjBC,eAAgB,OAChBC,MAAO,UACPC,SAAU,OACVC,gBAAiB,eAaNC,EAVF,WACT,OACI,yBAAKC,UAAU,WACX,kBAAC,IAAD,CAASC,GAAG,SAASC,OAAK,EAACC,MAAOT,GAAlC,S,ODwBGU,EAhCD,WA6BV,OA5BAC,qBAAU,WAAO,IAAD,EAUZf,EAAQ,IAAIgB,IACZf,EAAS,IAAIe,IAAyB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,MAEvFjB,EAAW,IAAIc,KACNI,QAASH,OAAOC,WAAYD,OAAOE,aAC5C,UAAAE,SAASC,eAAe,eAAxB,SAAiCC,YAAYrB,EAASsB,YAEtD,IAAMC,EAAW,IAAIT,IACfU,EAAW,IAAIV,IAAyB,CAAEV,MAAO,QACvDH,EAAO,IAAIa,IAAYS,EAAUC,GACjC1B,EAAM2B,IAAKxB,GAEXF,EAAO2B,SAASC,EAAI,EArBpB,SAASC,IACLC,sBAAuBD,GAEvB3B,EAAK6B,SAASC,GAAK,IACnB9B,EAAK6B,SAASE,GAAK,IAEnBhC,EAASiC,OAAQnC,EAAOC,GAiB5B6B,KAED,IAEI,M,MEhBIM,MAZf,WACE,OACI,kBAAC,IAAD,CAAeC,SAAUpB,OAAOqB,SAASC,UAAY,IAEjD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO3B,OAAK,EAAC4B,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAAC4B,KAAK,SAASC,UAAW3B,OCAhC4B,QACW,cAA7BzB,OAAOqB,SAASK,UAEe,UAA7B1B,OAAOqB,SAASK,UAEhB1B,OAAOqB,SAASK,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASd,SAASC,eAAe,SD6H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a02ad141.chunk.js","sourcesContent":["import {useEffect} from 'react';\nimport * as THREE from 'three';\n\nlet scene: any, camera: any, renderer: any, cube: any;\n\nconst About = () => {\n    useEffect(() => {\n        function animate() {\n            requestAnimationFrame( animate );\n\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.02;\n\n            renderer.render( scene, camera );\n        }\n\n        scene = new THREE.Scene();\n        camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.4, 1000 );\n\n        renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        document.getElementById('root')?.appendChild(renderer.domElement);\n\n        const geometry = new THREE.BoxGeometry();\n        const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        cube = new THREE.Mesh( geometry, material );\n        scene.add( cube );\n\n        camera.position.z = 5;\n\n        animate();\n\n    }, []);\n\n    return null;\n};\n\nexport default About;","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nconst defaultStyle = {\n    textDecoration: \"none\",\n    color: \"#F7D8C5\",\n    fontSize: '68px',\n    backgroundColor: 'transparent'\n};\n\nconst Home = () => {\n    return (\n        <div className=\"wrapper\">\n            <NavLink to=\"/about\" exact style={defaultStyle}>\n                ...\n            </NavLink>\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Home from \"./page/Home\";\nimport About from \"./page/About\";\nimport './assets/css/style.css';\n\nfunction App() {\n  return (\n      <BrowserRouter basename={window.location.pathname || ''}>\n      {/*<BrowserRouter basename={process.env.PUBLIC_URL}>*/}\n          <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/about\" component={About}/>\n          </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}